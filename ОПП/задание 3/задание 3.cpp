#include <iostream>  
#include <fstream>   
#include <string>    
#include <limits>    

int main() {
  setlocale(LC_ALL, "Russian");
    std::string filename; // Переменная для хранения имени файла

    // Запрос имени файла у пользователя
    std::cout << "Введите имя файла (с расширением .txt): ";
    std::cin >> filename;

    // Проверка расширения файла
    size_t dot_pos = filename.rfind('.'); // Ищем последнюю точку в имени файла
    if (dot_pos == std::string::npos || filename.substr(dot_pos) != ".txt") {
        // Если точки нет или расширение не .txt, выводим ошибку
        std::cerr << "Ошибка: Неверное расширение файла. Файл должен иметь расширение .txt" << std::endl;
        return 1; // Возвращаем код ошибки 1
    }

    std::ifstream file(filename); // Открываем файл для чтения

    if (!file.is_open()) {
        // Если файл не удалось открыть, выводим ошибку
        std::cerr << "Ошибка: Не удалось открыть файл '" << filename << "'" << std::endl;
        return 1; // Возвращаем код ошибки 1
    }

    std::string line; // Переменная для хранения текущей строки
    int lineCount = 0; // Переменная для подсчета количества строк
    int charCount = 0; // Переменная для подсчета общего количества символов

    while (std::getline(file, line)) {
        // Пока не достигнут конец файла, читаем строки из файла
        lineCount++; // Увеличиваем счетчик строк
        charCount+=line.length(); // Увеличиваем счетчик символов

        if (line.length() > 70){
            // Если длина текущей строки превышает 70 символов, выводим ошибку
          std::cerr << "Ошибка: Длина строки " << lineCount << " превышает 70 символов." << std::endl;
            return 1; // Возвращаем код ошибки 1
        }

        std::cout << line << std::endl; // Выводим текущую строку на экран
    }

    if(charCount > 1000) {
        // Если общее количество символов превышает 1000, выводим ошибку
         std::cerr << "Ошибка: Общее количество символов превышает 1000." << std::endl;
         return 1;
      }

    file.close(); // Закрываем файл

    if (charCount == 0) {
        // Если файл пуст, выводим сообщение об этом
        std::cout << "Файл пуст." << std::endl;
    } else{
        // Если файл был успешно прочитан, выводим сообщение об успехе
      std::cout << "Содержимое файла успешно выведено на экран.\n";
    }

    return 0; // Возвращаем код успешного завершения программы
}
